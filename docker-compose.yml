version: '3.1'
networks:
  my-events:
  monitoring:
  cicd:

volumes:
  prometheus-data:
  grafana-data:
  gitlab-config:
  gitlab-data:
  gitlab-logs:

secrets:
  gitlab_root_password:
    file: ./gitlab/root_password.txt

services:
  # Credentials:
  # username: root
  # pass: g1tl4bs3cr3t
  gitlab:
    build: gitlab/
    image: maxsuelmarinho/my-events:gitlab-0.1
    container_name: gitlab
    hostname: "peon"
    environment:
      #GITLAB_ROOT_PASSWORD: "g1tl4bs3cr3t"
      DOCKER_USERNAME: ${DOCKER_USERNAME}
      DOCKER_PASSWORD: ${DOCKER_PASSWORD}
      KUBE_TOKEN: ${KUBE_TOKEN}
      KUBE_CA_CERT: ${KUBE_CA_CERT}
      KUBE_SERVER: ${KUBE_SERVER}
      KUBE_CLUSTER: ${KUBE_CLUSTER}
      GITLAB_API_PORT: "30080"
      GITLAB_PRIVATE_TOKEN: "my-own-token"
      GITLAB_GROUP_NAME: "golang"
      GITLAB_REPO_NAME: "golang-my-events-example golang-microservices-example"
      GITLAB_OMNIBUS_CONFIG: |
        external_url 'http://peon:30080'
        gitlab_rails['gitlab_shell_ssh_port'] = 30022
        gitlab_rails['initial_root_password'] = File.read('/run/secrets/gitlab_root_password')
        gitlab_rails['monitoring_whitelist'] = ['127.0.0.0/8', '172.0.0.0/8', '192.168.0.0/16']
    secrets:
      - gitlab_root_password
    volumes:
      - gitlab-config:/etc/gitlab
      - gitlab-data:/var/opt/gitlab
      - gitlab-logs:/var/log/gitlab
      - ./gitlab/id_rsa.pub:/root/.ssh/id_rsa.pub      
    ports:
      - "30080:30080"
      - "30022:22"
    networks:
      - cicd

  gitlab-runner:
    build: gitlab-runner/
    image: maxsuelmarinho/my-events:gitlab-runner-0.1
    container_name: gitlab-runner
    environment:
      GITLAB_API_URL: "http://peon:30080"
      GITLAB_PRIVATE_TOKEN: "my-own-token"
      GITLAB_REPO_NAME: "golang-my-events-example"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./gitlab/runner/config:/etc/gitlab-runner
      #- ./gitlab-runner/config.toml:/etc/gitlab-runner/config.toml
      #- ./gitlab-runner/config:config:/etc/gitlab-runner
    depends_on:
      - gitlab
    links:
      - gitlab
    networks:
      - cicd

  # UI: http://localhost:9090
  prometheus:
    image: prom/prometheus:v1.6.1
    container_name: "prometheus"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    ports:
      - "9090:9090"
    networks:
     - monitoring
     - my-events

  # Default credentials:
  # username: admin
  # password: admin
  grafana:
    image: grafana/grafana:4.2.0
    container_name: "grafana"
    volumes:
      - grafana-data:/var/lib/grafana
    ports:
      - "3000:3000"
    networks:
      - monitoring

  # management UI:
  # user: guest
  # pass: guest
  rabbitmq:
    image: rabbitmq:3-management
    container_name: "rabbitmq"
    ports:
      - "5672:5672"
      - "15672:15672" # management UI
    networks:
      - my-events

  kafka:
    image: spotify/kafka
    container_name: "kafka"
    ports:
      - "9092:9092"
    networks:
      - my-events

  event-db:
    image: mongo:4.0
    container_name: "event-db"
    environment:
      - MONGO_DATA_DIR=/data/db
      - MONGO_LOG_DIR=/dev/null
    ports:
      - "27017:27017"
    #volumes:
    #  - ./mongo/events/data/db:/data/db
    command: mongod --smallfiles --logpath=/dev/null
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongo localhost:27017/test --quiet
      interval: 10s
      timeout: 10s
      retries: 5
    networks:
      - my-events

  event-service:
    build:
      context: events-service/
      dockerfile: Dockerfile.scratch
    image: maxsuelmarinho/my-events:events-service-0.1
    container_name: event-service
    restart: on-failure
    ports:
      - "8181:8181"
      - "18181:18181"
    depends_on:
      - event-db
      - rabbitmq
    environment:
      AMQP_BROKER_URL: "amqp://guest:guest@rabbitmq:5672/"
      MONGO_URL: "mongodb://event-db/events"
      LISTEN_URL: "0.0.0.0:8181"
      TZ: "America/Sao_Paulo"
    networks:
      - my-events

  booking-service:
    build:
      context: booking-service/
      dockerfile: Dockerfile.scratch
    image: maxsuelmarinho/my-events:booking-service-0.1
    container_name: booking-service
    restart: on-failure
    ports:
      - "8282:8282"
      - "18282:18282"
    depends_on:
      - booking-db
      - rabbitmq
    environment:
      AMQP_BROKER_URL: "amqp://guest:guest@rabbitmq:5672/"
      MONGO_URL: "mongodb://booking-db/bookings"
      TZ: "America/Sao_Paulo"
    networks:
      - my-events

  booking-db:
    image: mongo:4.0
    container_name: "booking-db"
    environment:
      - MONGO_DATA_DIR=/data/db
      - MONGO_LOG_DIR=/dev/null
    #volumes:
    #  - ./mongo/booking/data/db:/data/db
    command: mongod --smallfiles --logpath=/dev/null
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongo localhost:27017/test --quiet
      interval: 10s
      timeout: 10s
      retries: 5
    networks:
      - my-events

  frontend:
    build: myevents-frontend/
    image: maxsuelmarinho/my-events:frontend-0.4
    container_name: "frontend"
    ports:
      - "8080:80"
    depends_on:
      - event-service
      - booking-service
    networks:
      - my-events
